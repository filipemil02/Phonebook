
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.Random;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Box;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Emil
 */
public class InterfataGrafica extends javax.swing.JFrame {

    /**
     * Creates new form InterfataGrafica
     */
    public InterfataGrafica() {
        initComponents();
        jMenuItem1.setVisible(false);
        jMenuItem2.setVisible(false);
        //populam dropdown-ul criterii ordonare din enum-ul nostru
        String[] criteriiOrd = new String[CriteriuOrdonare.values().length];
        int i = 0;
        for(CriteriuOrdonare crt : CriteriuOrdonare.values()){
            criteriiOrd[i] = crt.toString();
            i++;
        }
        //i = 0;
        ordonareDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(criteriiOrd));
        //end populare dropdown criterii ordonare
                
        //populam dropdown-ul Filtre
        Filtre filtru = new Filtre();
        String[] filtre = new String[filtru.getFiltre().size()];
        
        i = 0;
//        for (Iterator it = filtru.getFiltre().values().iterator(); it.hasNext();) {
//            String f = it.next().toString();
//            filtre[i] = f;
//            i++;
//        }
       for (Object obj : filtru.getFiltre().entrySet())
       {
            Map.Entry<String, String> entry = (Map.Entry)obj;
            filtre[i]=entry.getValue();
            i++;
       }
        
        i = 0;
        FiltrareDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(filtre));
        //end populare dropdown Filtre
        
        System.out.println("Initializare interfata!");
        DefaultListModel model = new DefaultListModel();
        listaCt = new JList(model);
        
        if(ag!=null && ag.getContactList()!=null){
            ag.getContactList().forEach((_item) -> {
                try{
                                    Contact ctx = (Contact) _item;
                                    model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                             ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                    System.out.println("Nume Contact: " + ctx.getNume());
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                System.out.println("Item adaugat: " + _item.toString());
                listaCt.setVisible(true);
                iG.setVisible(true);
            });
            
        }
        //pentru a nu sterge din greseala mai multe randuri, dezactivam
        //multiple select
        listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        filtruInput.setEnabled(false);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adaugaButton = new javax.swing.JButton();
        stergeButton = new javax.swing.JButton();
        editeazaButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        FiltrareDropdown = new javax.swing.JComboBox<>();
        ordonareDropdown = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        filtruInput = new javax.swing.JTextField();
        filtreazaButton = new javax.swing.JButton();
        ordoneazaButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaCt = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        adaugaButton.setText("Adauga contact");
        adaugaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adaugaButtonActionPerformed(evt);
            }
        });

        stergeButton.setText("Stergere contact selectat");
        stergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stergeButtonActionPerformed(evt);
            }
        });

        editeazaButton.setText("Editeaza contact selectat");
        editeazaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editeazaButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Filtrare:");

        jLabel2.setText("Ordonare:");

        FiltrareDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        FiltrareDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FiltrareDropdownActionPerformed(evt);
            }
        });

        ordonareDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ordonareDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordonareDropdownActionPerformed(evt);
            }
        });

        jLabel3.setText("filtru:");

        filtruInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtruInputActionPerformed(evt);
            }
        });

        filtreazaButton.setText("Filtreaza");
        filtreazaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtreazaButtonActionPerformed(evt);
            }
        });

        ordoneazaButton.setText("Ordoneaza");
        ordoneazaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ordoneazaButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(listaCt);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        jLabel4.setText("Acesta este un demo! Pentru a avea acces la functionalitatea completa a aplicatiei, va rugam accesati meniul Ajutor > Inregistrare. Va multumim!");

        jMenu1.setText("Fisier");

        jMenuItem1.setText("Deschidere");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Salvare");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("Iesire");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ajutor");

        jMenuItem4.setText("Inregistrare");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Despre");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(adaugaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(84, 84, 84)
                                .addComponent(stergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editeazaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 868, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 275, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(FiltrareDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filtruInput, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(ordonareDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filtreazaButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ordoneazaButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filtruInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filtreazaButton)
                        .addComponent(jLabel3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FiltrareDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(ordonareDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ordoneazaButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adaugaButton)
                    .addComponent(stergeButton)
                    .addComponent(editeazaButton))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stergeButtonActionPerformed
        //implementam stergerea unui element
        System.out.println("in metoda stergeButtonAction");
        
        if(listaCt!=null){
            System.out.println("listaCt not null!");
            //luam valoarea selectata si o scoatem din model
            int index = listaCt.getSelectedIndex();
            DefaultListModel model = (DefaultListModel) listaCt.getModel();
            System.out.println("Element sters!!");
            
            String selectionInModel = model.get(index).toString();
            for(Object item : ag.getContactList()){
                try{
                    Contact c = (Contact)item;
                    if(compareSelectionWithAgenda(selectionInModel,c)){
                                    ag.stergeContact(c);
                                    System.out.println("contact sters din colectie!");
                                    model.remove(index);
                                    //intrerupem loop-ul deoarece nu trebuie sa avem dubluri in agenda
                                    break; 
                                }
                                System.out.println("Model size: " + model.getSize());
                }
                catch (Exception e){
                    System.out.println("error casting"+e);
                }
            }
//          
        }
        
    }//GEN-LAST:event_stergeButtonActionPerformed

    private void adaugaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adaugaButtonActionPerformed
                //Configurarea ferestrei adaugare contact
                JTextField nume = new JTextField(15);
                JTextField prenume = new JTextField(15);
                JTextField dataNasterii = new JTextField(15);
                JTextField nrTel = new JTextField(15);
                
                JPanel adaugaContactScreen = new JPanel();
                adaugaContactScreen.add(new JLabel("Nume:"));
                adaugaContactScreen.add(nume);
                adaugaContactScreen.add(Box.createHorizontalStrut(15)); // a spacer
                adaugaContactScreen.add(new JLabel("Prenume:"));
                adaugaContactScreen.add(prenume);
                adaugaContactScreen.add(Box.createHorizontalStrut(15));
                adaugaContactScreen.add(new JLabel("Data Nasterii(ZZ.LL.AAAA):"));
                adaugaContactScreen.add(dataNasterii);
                adaugaContactScreen.add(Box.createHorizontalStrut(15));
                adaugaContactScreen.add(new JLabel("Nr. Tel:"));
                adaugaContactScreen.add(nrTel);
                adaugaContactScreen.add(Box.createHorizontalStrut(15));
                //final configurare fereastra adaugare contact
                
                //afisam fereastra de adaugare contact
                //cu optiunile OK si CANCEL
                int result = JOptionPane.showConfirmDialog(null, adaugaContactScreen, 
                            "Va rugam sa introduceti datele:", JOptionPane.OK_CANCEL_OPTION);
                
                //daca se apasa OK, procesam datele si le salvam in agenda
                if (result == JOptionPane.OK_OPTION) {
                    System.out.println("nume introdus: " + nume.getText());
                    System.out.println("prenume introdus: " + prenume.getText());
                    
                    try{
                        //luam datele din interfata si creem obiectul Contact
                        Contact ct = new Contact(nume.getText(),prenume.getText(),
                            dataNasterii.getText(),new NrTel(nrTel.getText()));
                        
                        //adaugam obiectul Contact in agenda
                        ag.adaugareContact(ct);
                        
                        System.out.println("RE-Initializare interfata!");
                        //punem informatiile din agenda in interfata
                        DefaultListModel model = new DefaultListModel();
                        listaCt = new JList(model);
        
                        if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                //model.addElement(_item.toString());
                                System.out.println("Item adaugat: " + _item.toString());
                                System.out.println("Model size: " + model.getSize());
                                
                                try{
                                    Contact ctx = (Contact) _item;
                                    model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                             ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                    System.out.println("Nume Contact: " + ctx.getNume());
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                                
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        }
                    }
                    catch (Exception e){
                        System.out.println("Error: " + e);
                        //afisam popup daca avem erori
                            JOptionPane.showMessageDialog(null,
                                e.getMessage());
                    }  
                }
    }//GEN-LAST:event_adaugaButtonActionPerformed

    private void editeazaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editeazaButtonActionPerformed
            System.out.println("in metoda editeazaButtonAction");
        
            if(listaCt!=null){
                
                //luam valoarea selectata si o scriem in fereastra
                //de editare
                int index = listaCt.getSelectedIndex();
                DefaultListModel model = (DefaultListModel) listaCt.getModel();
            
                String selectionInModel = model.get(index).toString();
                System.out.println("selectionInModel: " + selectionInModel);
                
                Contact localContact = null;
                
                for(Object item : ag.getContactList()){
                    try{
                        Contact localCt = (Contact)item;
                        System.out.println("localCt.toString(): " + localCt.toString());
                            if(compareSelectionWithAgenda(selectionInModel,localCt)){//localCt.toString().equals(selectionInModel)){
                                    localContact=localCt;
                                    ag.stergeContact(localContact);
                                    System.out.println("contact sters din colectie!");
                                    break;
                                    
                            }
                            System.out.println("Model size: " + model.getSize());
                    }
                    catch (Exception e){
                        System.out.println("error casting"+e);
                    }
                }
                
                //Configurarea ferestrei editare contact
                String numeText = "";
                String prenumeText = "";
                String dataNasteriiText = "";
                String nrTelText = "";
                
                try{
                    if(localContact!=null){
                        numeText = localContact.getNume();
                        prenumeText = localContact.getPrenume();
                        dataNasteriiText = localContact.getDataNasterii();
                        nrTelText = localContact.getNrTel().toString();
                    }
                }
                catch (Exception e){
                    System.err.println("Exception casting model entity!" + e);
                }
                
                JTextField nume = new JTextField(15);
                nume.setText(numeText);
                
                JTextField prenume = new JTextField(15);
                prenume.setText(prenumeText);
                
                JTextField dataNasterii = new JTextField(15);
                dataNasterii.setText(dataNasteriiText);
                
                JTextField nrTel = new JTextField(15);
                nrTel.setText(nrTelText);
                
                JPanel editeazaContactScreen = new JPanel();
                editeazaContactScreen.add(new JLabel("Nume:"));
                editeazaContactScreen.add(nume);
                editeazaContactScreen.add(Box.createHorizontalStrut(15)); // a spacer
                editeazaContactScreen.add(new JLabel("Prenume:"));
                editeazaContactScreen.add(prenume);
                editeazaContactScreen.add(Box.createHorizontalStrut(15));
                editeazaContactScreen.add(new JLabel("Data Nasterii(ZZ.LL.AAAA):"));
                editeazaContactScreen.add(dataNasterii);
                editeazaContactScreen.add(Box.createHorizontalStrut(15));
                editeazaContactScreen.add(new JLabel("Nr. Tel:"));
                editeazaContactScreen.add(nrTel);
                editeazaContactScreen.add(Box.createHorizontalStrut(15));
                //final configurare fereastra adaugare contact
                
                //afisam fereastra de adaugare contact
                //cu optiunile OK si CANCEL
                int result = JOptionPane.showConfirmDialog(null, editeazaContactScreen, 
                            "Va rugam sa introduceti datele:", JOptionPane.OK_CANCEL_OPTION);
                
                //daca se apasa OK, procesam datele si le salvam in agenda
                if (result == JOptionPane.OK_OPTION) {
                    System.out.println("nume introdus: " + nume.getText());
                    System.out.println("prenume introdus: " + prenume.getText());
                    
                    try{
                        //luam datele din interfata si creem obiectul Contact
                        Contact ct = new Contact(nume.getText(),prenume.getText(),
                            dataNasterii.getText(),new NrTel(nrTel.getText()));
                        
                        //adaugam obiectul Contact in agenda
                        try{
                            ag.adaugareContact(ct);
                        }
                        catch(Exception e){
                            //afisam popup daca avem erori
                            JOptionPane.showMessageDialog(null,
                                e.getMessage());
                        }
                        
                        System.out.println("RE-Initializare interfata!");
                        //punem informatiile din agenda in interfata
                        DefaultListModel modelNew = new DefaultListModel();
                        listaCt = new JList(modelNew);
        
                        if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    modelNew.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                             ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                    System.out.println("Nume Contact: " + ctx.getNume());
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                                System.out.println("Item adaugat: " + _item.toString());
                                System.out.println("Model size: " + model.getSize());
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        }
                    }
                    catch (Exception e){
                        System.out.println("Error: " + e);
                    }  
                }
            }
    }//GEN-LAST:event_editeazaButtonActionPerformed

    private void filtruInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtruInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filtruInputActionPerformed

    private void ordoneazaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordoneazaButtonActionPerformed
        System.out.println("In metoda ordoneazaButtonActionPerformed");
        String selection = ordonareDropdown.getSelectedItem().toString();
        System.out.println("selectia curenta: " + selection);
        
        if(ag!=null){
            System.out.println("agenda not null!");
            if(selection.equals(CriteriuOrdonare.DUPA_NUME.toString())){
                
                System.out.println("Sortam dupa nume!");
                //sortarea se face cand setam criteriul
                ag.setCriteriuCurent(CriteriuOrdonare.DUPA_NUME);
                
                //acum avem lista sortata, trebuie recitita in interfata
                DefaultListModel model = new DefaultListModel();
                listaCt = new JList(model);
        
                        if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                             ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                    System.out.println("Nume Contact: " + ctx.getNume());
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        }
                
            }
            else if(selection.equals(CriteriuOrdonare.DUPA_PRENUME.toString())){
                System.out.println("Sortam dupa prenume!");
                //sortarea se face cand setam criteriul
                ag.setCriteriuCurent(CriteriuOrdonare.DUPA_PRENUME);
                
                //acum avem lista sortata, trebuie recitita in interfata
                DefaultListModel model = new DefaultListModel();
                listaCt = new JList(model);
        
                        if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                             ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                    System.out.println("Nume Contact: " + ctx.getNume());
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                                
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        }
            }
            else if(selection.equals(CriteriuOrdonare.DUPA_DATA.toString())){
                System.out.println("Sortam dupa prenume!");
                //sortarea se face cand setam criteriul
                ag.setCriteriuCurent(CriteriuOrdonare.DUPA_DATA);
                
                //acum avem lista sortata, trebuie recitita in interfata
                DefaultListModel model = new DefaultListModel();
                listaCt = new JList(model);
        
                        if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                             ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                    System.out.println("Nume Contact: " + ctx.getNume());
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                        }
            }
        }
    }//GEN-LAST:event_ordoneazaButtonActionPerformed

    private void ordonareDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ordonareDropdownActionPerformed
        System.out.println("In metoda ordonareDropdownActionPerformed");
        String selection = ordonareDropdown.getSelectedItem().toString();
        System.out.println("selectia curenta: " + selection);
        
        if(ag!=null){
            if(selection.equals(CriteriuOrdonare.DUPA_NUME)){
                ag.setCriteriuCurent(CriteriuOrdonare.DUPA_NUME);
            }
            else if(selection.equals(CriteriuOrdonare.DUPA_PRENUME)){
                ag.setCriteriuCurent(CriteriuOrdonare.DUPA_PRENUME);
            }
            else if(selection.equals(CriteriuOrdonare.DUPA_DATA)){
                ag.setCriteriuCurent(CriteriuOrdonare.DUPA_DATA);
            }
        }
    }//GEN-LAST:event_ordonareDropdownActionPerformed

    private void filtreazaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtreazaButtonActionPerformed
        System.out.println("In metoda filtreazaButtonActionPerformed");
        String selection = FiltrareDropdown.getSelectedItem().toString();
        System.out.println("selectia curenta: " + selection);
        Filtre filtre = new Filtre();
        //fiind vorba de filtrare, umblam doar la model
        if(ag!=null){
            
            DefaultListModel model = new DefaultListModel();
            listaCt = new JList(model);
            
            //fara filtre
            if(selection.equals(filtre.getFiltre().get(Filtre.FARA_FILTRE))){
               System.out.println("Filtre dezactivate!");
               if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact: " + ctx.getNume());
                                    
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
               
            }
            //filtru nr mobile
            if(selection.equals(filtre.getFiltre().get(Filtre.NR_MOBILE))){
               System.out.println("Filtram doar numere mobile!");
               
               if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    if(ctx.getNrTel().isMobile){
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact Mobil: " + ctx.getNume());
                                    }
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
               
            }
            //filtru nr fixe
            else if(selection.equals(filtre.getFiltre().get(Filtre.NR_FIXE))){
                System.out.println("Filtram doar numere fixe!");
                if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    if(!ctx.getNrTel().isMobile){
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact Mobil: " + ctx.getNume());
                                    }
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
            }
            //filtru data azi
            else if(selection.equals(filtre.getFiltre().get(Filtre.DATA_AZI))){
                System.out.println("Filtram doar contacte cu ziua nasterii azi!");
                if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    if(isDataNasteriiAzi(ctx.getDataNasterii())){
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact Data Nasterii azi: " + ctx.getNume());
                                    }
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
            }
            //filtru data luna curenta > azi
            else if(selection.equals(filtre.getFiltre().get(Filtre.DATA_LUNA_CURENTA))){
                System.out.println("Filtram doar contacte cu ziua nasterii in luna curenta si ziua > azi!");
                if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    if(isDataNasteriiLunaCurenta(ctx.getDataNasterii())){
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact Data Nasterii > azi: " + ctx.getNume());
                                    }
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
            }
            else if(selection.equals(filtre.getFiltre().get(Filtre.PERSONALIZAT))){
               System.out.println("Filtram personalizat!");
               String filtruPersonalizat = filtruInput.getText();
               DefaultListModel backupModel = model;
               if(filtruPersonalizat!=null && !"".equals(filtruPersonalizat)){
                   if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    if(filtreazaPersonalizat(ctx,filtruPersonalizat)){
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact Data Nasterii > azi: " + ctx.getNume());
                                    }
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
               }
               else if("".equals(filtruPersonalizat)){
                   System.out.println("Filtre dezactivate!");
               if(ag!=null && ag.getContactList()!=null){
                            //parcurgem agenda ag si punem in interfata (model) contactele din ea
                            ag.getContactList().forEach((_item) -> {
                                try{
                                    Contact ctx = (Contact) _item;
                                    
                                            model.addElement(ctx.getPrenume() + " " + ctx.getNume() +
                                                     ", " + ctx.getNrTel().toString() + ", " + ctx.getDataNasterii());
                                            System.out.println("Nume Contact: " + ctx.getNume());
                                    
                                }
                                catch (Exception e) {
                                    System.out.println("Error casting item: " + e);
                                }
                            });
                            jScrollPane1.setViewportView(listaCt);
                            listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                    }
                
               }
            }
        }
    }//GEN-LAST:event_filtreazaButtonActionPerformed

    private void FiltrareDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltrareDropdownActionPerformed
        System.out.println("in FiltrareDropdownActionPerfomed");
        
        String selected = (String)FiltrareDropdown.getSelectedItem();
        System.out.println("selected: " + selected);
        System.out.println("fara filtre: " + new Filtre().getFiltre().get(Filtre.PERSONALIZAT));
        
        Map filtre = new Filtre().getFiltre();
        
        if(selected.equals(filtre.get(Filtre.PERSONALIZAT))){
            filtruInput.setEnabled(true);
        }
        else {
            filtruInput.setEnabled(false);
        }
        
    }//GEN-LAST:event_FiltrareDropdownActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       System.out.println("In meniul FILE - deschidere!!");
       //citim agenda din fisier CSV
       loadAgendaFromCSV();
       
       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    JFileChooser chooser;
    
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       System.out.println("In meniul FILE - salvare!!");
       try{
            if(ag!=null && ag.getContactList()!=null && !ag.getContactList().isEmpty()){
                writeAgendaToCSV();
            
            }
            else {
                //afisam mesaj daca agenda este goala
                JOptionPane.showMessageDialog(null,"Agenda este goala!");
            }
       }
       catch (Exception e){
           //afisam popup daca avem erori
           JOptionPane.showMessageDialog(null,e.getMessage());
       }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.out.println("In meniul FILE - iesire!!");
        //quit
        
        int dialogButton = JOptionPane.YES_NO_OPTION;
        
        int dialogResult = JOptionPane.showConfirmDialog (null, "Doriti sa parasiti aplicatia?","Warning",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION){
            System.exit(0);
        }
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        System.out.println("In meniul Ajutor - inregistrare!!");
        //register
        
        JFrame frame = new JFrame("Cod Deblocare");
        String code = JOptionPane.showInputDialog(
                                        frame, 
                                        "Va rugam sa introduceti codul de deblocare!", 
                                        "Cod deblocare", 
        JOptionPane.WARNING_MESSAGE
        );
        if(code!=null){
            if(Filtre.COD_SECRET.equals(code)){
                timer.stop();
                jLabel4.setVisible(false);
                jMenuItem1.setVisible(true);
                jMenuItem2.setVisible(true);
                JOptionPane.showMessageDialog(frame, "Felicitari!Aplicatia a fost deblocata");
            }
            else {
                JOptionPane.showMessageDialog(frame, "Codul introdus este incorect!!");
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        System.out.println("In meniul Ajutor - despre!!");
        
        JFrame frame = new JFrame("Despre");
        JOptionPane.showMessageDialog(frame, "Proiect Final curs Java - InfoAcademy. Author: Emil Filip");
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    public static Agenda ag = null;
    public static InterfataGrafica iG;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfataGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfataGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfataGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfataGrafica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        screen obr=new screen();
        obr.setVisible(true);
        try {
            for(int i=0;i<100;i++){
                Thread.sleep(35);
               obr.jProgressBar1.setValue(i);
                if(i==99){
                    obr.setVisible(false);
                 System.out.println("in if i==0");
                }
            }
                
        } catch(Exception e){
            
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                System.out.println("In RUN!");
                iG = new InterfataGrafica();
                
                if(ag==null){
                    System.out.println("Agenda este goala - initializam");
                    ag = new Agenda();
                }
                
                iG.setVisible(true);
                
                iG.changeCol();
                
                
                
                //end metoda
            }
        });
    }
    
    final int delay = 1000; //milliseconds
    final Random r=new Random();
    
ActionListener taskPerformer = new ActionListener() {
        @SuppressWarnings("unused")
        public void actionPerformed(ActionEvent evt) {
            Color c=new Color(r.nextInt(256),r.nextInt(256),r.nextInt(256),r.nextInt(256));
            
            jLabel4.setForeground(c);
            
        }
    };

    Timer timer = new Timer(delay, taskPerformer);
    
protected void changeCol(){
    
    jLabel4.setOpaque(true);
    jLabel4.setBackground(Color.BLACK);
    
    

    timer.start();
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> FiltrareDropdown;
    private javax.swing.JButton adaugaButton;
    private javax.swing.JButton editeazaButton;
    private javax.swing.JButton filtreazaButton;
    private javax.swing.JTextField filtruInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listaCt;
    private javax.swing.JComboBox<String> ordonareDropdown;
    private javax.swing.JButton ordoneazaButton;
    private javax.swing.JButton stergeButton;
    // End of variables declaration//GEN-END:variables

    private boolean compareSelectionWithAgenda(String selectionInModel, Contact localCt) {
        System.out.println("in compareSelectionWithAgenda");
        
        if(ag!=null){
           String localCtParsed = localCt.getPrenume() + " " + localCt.getNume() +
                    ", " + localCt.getNrTel().toString() + ", " + localCt.getDataNasterii(); 
           return localCtParsed.equalsIgnoreCase(selectionInModel);
        }
        
        return false;
    }

    private boolean isDataNasteriiAzi(String dataNasterii){
        System.out.println("in isDataNasteriiAzi");
        
        try{
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date date = sdf.parse(dataNasterii);
            Date today = new Date();
            System.out.println("Data introdusa" + date);
            System.out.println("Data curenta" + new Date());
            //verificam daca data introdusa are luna si ziua curenta
            if(date.getDate()==today.getDate() 
                && date.getMonth() == today.getMonth()){
                            return true;
            }
        }
        catch (Exception e) {
            System.out.println("exception parsing date: " + e);
        }
        return false;
    }
    
    private boolean isDataNasteriiLunaCurenta(String dataNasterii){
        System.out.println("in isDataNasteriiLunaAsta");
        
        try{
            SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy");
            Date date = sdf.parse(dataNasterii);
            Date today = new Date();
            System.out.println("Data introdusa" + date);
            System.out.println("Data curenta" + new Date());
            //verificam daca data introdusa are luna si ziua curenta
            if(date.getDate()>today.getDate() 
                && date.getMonth() == today.getMonth()){
                            return true;
            }
        }
        catch (Exception e) {
            System.out.println("exception parsing date: " + e);
        }
        return false;
    }

    private boolean filtreazaPersonalizat(Contact ctx, String filtruPersonalizat) {
        System.out.println("in filtreazaPersonalizat");
        String contact = ctx.getNume() + " " + ctx.getPrenume() + " " + ctx.getNrTel();
        return contact.contains(filtruPersonalizat);
    }

    private void writeAgendaToCSV() throws FileNotFoundException {
        System.out.println("Salvam agenda in fisier CSV");
        File file = new File("");
        
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Va rugam sa alegeti locatia de salvare");
        chooser.setFileSelectionMode(JFileChooser.SAVE_DIALOG);
        chooser.setApproveButtonText("Save");
        ;
        
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(true);
        //    
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) { 
            System.out.println("getCurrentDirectory(): " 
                +  chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : " 
                +  chooser.getSelectedFile());
            
            file = chooser.getSelectedFile();
        }
        else {
            System.out.println("No Selection ");
        }
     
    
        PrintWriter pw = new PrintWriter(new File(file.getAbsolutePath()+"/Agenda.csv"));
        
        StringBuilder sb = new StringBuilder();
        //punem capul de tabel
        sb.append("Prenume");
        sb.append(',');
        sb.append("Nume");
        sb.append(',');
        sb.append("NrTel");
        sb.append(',');
        sb.append("DataNasterii");
        sb.append('\n');
        
        ag.getContactList().forEach((_item) -> {
                try{
                    Contact ctx = (Contact) _item;
                    System.out.println("Nume Contact: " + ctx.getNume());
                    
                    //punem randul de valori
                    sb.append(ctx.getPrenume());
                    sb.append(',');
                    sb.append(ctx.getNume());
                    sb.append(',');
                    sb.append(ctx.getNrTel());
                    sb.append(',');
                    sb.append(ctx.getDataNasterii());
                    sb.append('\n');
                    
                }
                catch (Exception e) {
                    System.out.println("Error casting item: " + e);
                }
                
            }); 
        pw.write(sb.toString());
        pw.close();
        
        System.out.println("Agenda Salvata!");
        
        //afisam informare ca am salvat agenda
        JOptionPane.showMessageDialog(null,"Agenda a fost salvata la calea: " + file.getAbsolutePath()+"/Agenda.csv");
    }

    private void loadAgendaFromCSV() {
       System.out.println("in loadAgendaFromCSV"); 
       
        File file = new File("");
        
        //deschidem fereastra sa alegem fisierul dorit:
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Va rugam sa alegeti fisierul CSV");
        chooser.setFileSelectionMode(JFileChooser.OPEN_DIALOG);
        chooser.setApproveButtonText("Open");
        
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter fileFilter = new FileNameExtensionFilter("CSV Files", "csv");
        chooser.setFileFilter(fileFilter);
        //    
       
        if (chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) { 
            System.out.println("getCurrentDirectory(): " 
                +  chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : " 
                +  chooser.getSelectedFile());
            
            file = chooser.getSelectedFile();
            
            if(ag!=null && !ag.getContactList().isEmpty()){
                ag.getContactList().clear();
            }
            
            BufferedReader br = null;
            String line = "";
            String cvsSplitBy = ",";

            DefaultListModel model = new DefaultListModel();
            listaCt = new JList(model);
            try {

                br = new BufferedReader(new FileReader(file));
                String headerLine = br.readLine();
                while ((line = br.readLine()) != null) {

                    // use comma as separator
                    String[] contact = line.split(cvsSplitBy);
                    System.out.println("contact : " + contact);
                    Contact ct = new Contact(contact[1],contact[0],contact[3],new NrTel(contact[2]));
                    System.out.println("ct : " + ct);
                    ag.adaugareContact(ct);
                    
                    
                    model.addElement(ct.getPrenume() + " " + ct.getNume() +
                            ", " + ct.getNrTel().toString() + ", " + ct.getDataNasterii());

            }
                    jScrollPane1.setViewportView(listaCt);
                    listaCt.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        } catch (Exception e) {
            System.out.println("Error : " + e);
        
        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (Exception e) {
                    System.out.println("Error : " + e);
                }
            }
        }
            
        }
        else {
            System.out.println("No Selection ");
        }
        
    }
       
    
}
